syntax = "proto3";
option cc_enable_arenas = true;
option java_package = "com.gearssports.protobuf.camera";
option java_outer_classname = "CameraCalibrationProto";
option java_multiple_files = true;
package gears.proto.camera;

import "gears/proto/camera/Revision.proto";

// Calibration data for a single camera.
message CameraCalibration {

    // Id of the camera.
    int32 serial = 1;

    // Kind of camera this is.
    .gears.proto.camera.Revision revision = 2;

    // Camera intrinsics
    .gears.proto.camera.CameraIntrinsics intrinsics = 13;

    // Camera extrinsics
    .gears.proto.camera.CameraExtrinsics extrinsics = 14;

    // Mask to use.
    //
    // Will be null if no pixels are being masked.
    .gears.proto.camera.CameraMask blocking_mask = 15;

}

message CameraIntrinsics {

    // Principal point in pixels
    double principal_x = 1;

    // Principal point in pixels
    double principal_y = 2;

    // Focal Length in pixels
    double focal_length_x = 3;

    // Focal Length in pixels
    double focal_length_y = 4;

    // Lens Radial Distortion Coefficient (unitless)
    double coefficient_0 = 5;

    // Lens Radial Distortion Coefficient (unitless)
    double coefficient_1 = 6;

    // Lens Radial Distortion Coefficient (unitless)
    double coefficient_2 = 7;

    // Lens Tangential Distortion Coefficient (unitless)
    double tangential_0 = 8;

    // Lens Tangential Distortion Coefficient (unitless)
    double tangential_1 = 9;

    // Width of camer imager in millimeters
    double imager_width = 10;

    // Height of camer imager in millimeters
    double imager_height = 11;

    // Width of camera image in pixels
    double imager_pixel_width = 12;

    // Height of camera image in pixels
    double imager_pixel_height = 13;

}

message CameraExtrinsics {

    // Camera x position in meters
    double x = 1;

    // Camera y position in meters
    double y = 2;

    // Camera z position in meters
    double z = 3;

    // Camera Orientation 3x3 matrix
    double orientation_0 = 4;
    double orientation_1 = 5;
    double orientation_2 = 6;
    double orientation_3 = 7;
    double orientation_4 = 8;
    double orientation_5 = 9;
    double orientation_6 = 10;
    double orientation_7 = 11;
    double orientation_8 = 12;

}

message MaskPoint{

    int32 x = 1;

    int32 y = 2;

}

message CameraMask {

    // width of the mask in pixels
    int32 width = 1;

    // height of the mask in pixels
    int32 height = 2;

    // Pixels to mask.
    // all points should have:
    //   0 <= point.x <= width
    //   0 <= point.y <= height
    repeated MaskPoint points = 15;

}
